//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7126d563-1a0e-4ba4-9302-0b0c7fff70d1"",
            ""actions"": [
                {
                    ""name"": ""FirstSpell"",
                    ""type"": ""Button"",
                    ""id"": ""213f9c8e-fcde-4b1b-8ca6-968f07b8ef58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondSpell"",
                    ""type"": ""Button"",
                    ""id"": ""1ba2d608-ac1f-4eea-9976-c4fca1cd6ef4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThirdSpell"",
                    ""type"": ""Button"",
                    ""id"": ""b464ea55-f397-4814-9cfe-0ecbe945d211"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""924875f8-a431-420c-a87d-bd3f601fc5a4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""FirstSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27ff8ef4-ea7f-46b1-9d33-d60da9d3e71c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SecondSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2e7303c-ca69-407b-95f8-3bca45a8465f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ThirdSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_FirstSpell = m_Player.FindAction("FirstSpell", throwIfNotFound: true);
        m_Player_SecondSpell = m_Player.FindAction("SecondSpell", throwIfNotFound: true);
        m_Player_ThirdSpell = m_Player.FindAction("ThirdSpell", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_FirstSpell;
    private readonly InputAction m_Player_SecondSpell;
    private readonly InputAction m_Player_ThirdSpell;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstSpell => m_Wrapper.m_Player_FirstSpell;
        public InputAction @SecondSpell => m_Wrapper.m_Player_SecondSpell;
        public InputAction @ThirdSpell => m_Wrapper.m_Player_ThirdSpell;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @FirstSpell.started += instance.OnFirstSpell;
            @FirstSpell.performed += instance.OnFirstSpell;
            @FirstSpell.canceled += instance.OnFirstSpell;
            @SecondSpell.started += instance.OnSecondSpell;
            @SecondSpell.performed += instance.OnSecondSpell;
            @SecondSpell.canceled += instance.OnSecondSpell;
            @ThirdSpell.started += instance.OnThirdSpell;
            @ThirdSpell.performed += instance.OnThirdSpell;
            @ThirdSpell.canceled += instance.OnThirdSpell;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @FirstSpell.started -= instance.OnFirstSpell;
            @FirstSpell.performed -= instance.OnFirstSpell;
            @FirstSpell.canceled -= instance.OnFirstSpell;
            @SecondSpell.started -= instance.OnSecondSpell;
            @SecondSpell.performed -= instance.OnSecondSpell;
            @SecondSpell.canceled -= instance.OnSecondSpell;
            @ThirdSpell.started -= instance.OnThirdSpell;
            @ThirdSpell.performed -= instance.OnThirdSpell;
            @ThirdSpell.canceled -= instance.OnThirdSpell;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnFirstSpell(InputAction.CallbackContext context);
        void OnSecondSpell(InputAction.CallbackContext context);
        void OnThirdSpell(InputAction.CallbackContext context);
    }
}
